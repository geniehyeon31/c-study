C++ 언어본색 제 4장 

포인터? 기억 장소의 주소, 포인터 변수? 그 주소를 기억하는 변수
앞서 배웠던 일반 변수는 자료를 저장, 포인터는 자료를 저장하는 변수의 주소를 기억.
쓰임새 -> 일반변수: 자료 자체를 저장하기 위해 사용, 포인터 변수: 일반 변수가 실제 매모리에 할당된 주소를 참조하기 위해 사용

4.1.1 변수
변수는 데이터를 저장하는 기억 장소
변수 사용에서의 기본 규칙
 *변수를 사용하기 전에 미리 선언해야 한다.
 *변수 선언에서 프로그래머로서의 예의 있는 코딩은 변수 초기화이다.

디버깅 모드 단축키 (F5)디버깅 시작 (Shift+F5)디버깅 중지 (F9)현재 커서 위치에 중단점을 설정하거나 해제 
(F10)프로시저 단위로 디버깅 실행 (F11)한 단계씩 코드로 디버깅을 실행

4.1.2 포인터 변수
일반 변수 = 값;
포인터 변수 = 주소;
자료형*포인터 변수 이름;

*pa의 값을 처리하기
(1) pa에 접근 -> pa에 저장된 a의 주소를 확인
(2) 간접지정 연산자를 실행 -> a의 주소로 접근하여 a에 저장된 값을 참조

일반변수 -> 값    예) cout << a; // 변수 a에 저장된 값 출력
&일반 변수 -> 주소    예) cout << &a; // 변수 a의 주솟값 출력
포인터 변수 -> 주소    예) cout << pa; // pa는 포인터 변수이므로 주소를 저장, 따라서 주소 출력됨
*포인터 변수 -> 값    예) cout << *pa; // pa에 저장된 주솟값에 다시 한 번 더 접근하여 지정된 값을 출력함

4.2 배열
변수는 하나의 기억 공간, 배열은 연속적인 기억 공간을 나타냄. 
5개의 기억 공간을 변수로 사용하려면 5개의 변수 이름을 지정해야 함. 
배열을 사용하면 하나의 이름으로 5개의 기억공간을 사용할 수 있음. 배열은 주로 반복문과 함께 사용됨.

변수와 배열의 공통점? 둘 다 기억 공간을 확보한다는 것.
변수와 배열의 차이점? 변수는 하나의 자료형에 대한 하나의 기억공간이고, 배열은 하나의 자료형에 대한 여러 개의 연속적인 기억 공간.

배열을 선언할 때는 하나의 이름에 몇 개의 기억 공간이 필요한 지 그 개수를 적어야 함. 

int score[3];

먼저 자료형을 명시하고 이어서 변수 이름과 마찬가지로 배열의 이름을 지정한 후 필요한 개수를 대괄호([])로 나타낸다.
앞서 선언된 배열의 예는 score라는 이름으로 정수형 기억 장소 3개를 확보하는 것.
score[0], score[1], score[2]

배열은 일반 변수와 마찬가지로 선언과 동시에 초기화가 가능. 배열의 각 요소의 값을 중괄호 ({})안에 콤마(,)로 구분해서 나타냄.
정수형 배열 score에 80, 90, 88을 각 기억 장소에 선언과 동시에 초기화하면 다음과 같다.

int score[3] = {80, 90, 88};

선언과 동시에 초기화하면 각 기억 장소에 값이 설정됨.

-배열 선언
배열 선언은 자료형과 사용할 크기를 함께 표기. 배열의 이름은 주소를, 배열 변수요소에 주소 지정 연산자(&)를 표기하면 주소를, 배열 변수 요소를 그대로 사용하면 값을 나타낸다. 

자로횽 배열 이름[사용할 크기];
cout << "배열의 시작 주소: " << 배열 이름 << endl;
cout << "배열의 시작 주소: " << &배열 이름[0] <<endl;
cout << "배열의 첫 번째 요소값: " << 배열 이름[0] << endl;

-배열 선언 및 초기화 
선언과 동시에 초기화할 수 있다.
자료형 배열 이름[사용할 크기]={초깃값1, 초깃값2, ...};
자료형 배열 이름[사용할 크기]={초깃값1, }; //0번째 요소는 초깃값 1로 지정되고 나머지는 0으로 초기화됨

4.3 문자열
문자열은 문자의 모음이다. 문자열은 연이어 있는 문자들의 모음으로, 연이어 있기 때문에 문자 배열이다.

4.3.1 문자열 다루기 : 문자 배열
문자 변수의 자료형은 char이고, 문자 상수는 작은따옴표(' ')로 표기하며, 기억 장소 1바이트를 차지한다. 
이해 비해 문자열은 문자의 모음이다.
문자열은 문자 상수의 모음으로 표기할 때 큰 따옴표(" ")로 표기한다.

char flag='y';
char string[30] = "computer";

4.3.2 문자 변수, 문자 배열의 주소
선언한 변수의 주소를 확인할 때 주소지정 연산자(&)를 이용해서 주솟값을 확인했었다. 4-14.cpp 로 문자 변수와 문자 배열도 그런지 확인했다. 
예상했던 주소가 출력되지 않았다. 
문자열을 출력할 경우 문자열의 첫 번째 문자 시자 주소를 알려주면 널 문자가 표시된 곳 까지 출력되었다. 그래서 문자가 저장된 주소를cout를 이용해서 아무런 표식없이 사용하면 문자열로 간주하여 널 문자가 있는 곳까지 메모리에 접근한다.
이로 인해 문자들이 출력된다.

원하는 문자 변수나 문자 배열의 주소를 확인하기 위해서 cout으로 출력하려면 주소이므로 출력 형식을 숫자 형태로 변경해야한다. 따라서 일시적 형 변환을 시키면 가능하다. 

4.3.3 문자 배열의 활용과 주의점
숫자 데이터의 경우 덧셈이나 뺄셈과 같이 일련의 연산 대상이 된다. 
마찬가지로 문자열도 숫자에서의 연산과 같이 요구되는 기능들이 있다.
주로 많이 사용되는 것은 문자열 전체 복사나 일부분 복사, 문자열 내에서 특정 문자 찾기 등이 있다.
이러한 기능들이 자주 사용되므로 컴파일러에 관련 기능이 미리 정의되어 있다.
컴파일러에 미리 정의되어 있는 기능들을 표준 함수 또는 영문 그대로 표준 라이브러리라 부르며 iostream을 통해 참조한다. 

문자열은 문자 배열에 저장된 형태로, 문자열 관련 표준 함수는 문자 배열의 첨자 개념과 문자열을 기준으로 그 기능이 구현된다.

프로그램 작성하기 1
다음 문제를 프로그램으로 작성해보자.
(문제)입력한 문자열을 또 다른 문자 배열에 복사하는 기능을 만들어 보자.

4.4 포인터: 메모리 주소
포인터-> 기억 장소의 주소, 포인터 변수 -> 주소를 저장하는 변수
정수형 포인터 변수, 문자형 포인터 변수, 실수형 포인터 변수 모두 기억 장소의 주소를 기억하기 때문에 주어진 크기는 운영체제에 의해 결정됨.
즉, 윈도우  xp는 32비트를 기본으로 하기 때문에 기억 장소를 나타내는 주소는 모두 4바이트가 할당됨.

4.5 레퍼런스 변수
레퍼런스 변수는 이미 선언된 변수를 다른 이름으로 부르는 변수
레퍼런스 변수는 변수 선언에서 반드시 어떤 변수를 다른 이름으로 부르는가를 명시해야함.
즉 반드시 초기화가 함께 이루어져야 함.
레퍼런스 변수는 선언에서 레퍼런스 변수를 나타내는 기호인 주소지정 연산자(&)를 함께 표시한다.

자료형 &변수 이름 = 변수;

int a = 100;
int &ra = a;

4.6 동적 할당
자료 저장을 위해 기억 장소를 할당하는 방법에는 정적 할당과 동적 할당이 있다.
정적 할당은 앞서 살펴본 변수의 선언 방식을 말한다.
변수를 선언하면 자료 저장을 위한 기억 장소가 할당된다.
프로그램 실행 전에 필요한 기억 장소가 미리 할당된 상태에서 프로그램 동작이 시작되므로 '정적'이라 한다. 
그렇다면 '동적'은 미리 할당되지 않는 것을 말하는가? 그렇다.
동적 할당은 프로그램 실행 중에 필요한 만큼 기억 장소를 요청하는 것이다. 
동적 할당은 기억 장소를 할당하고 할당된 기억 장소의 주소를 포인터 변수에 저장하면 되는 것이다. 
